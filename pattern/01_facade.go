package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern

Плюсы паттерна «Фасад»:
* Упрощение доступа к нескольким сервисам или объектам.
* Предоставляет унифицированный способ доступа к сервисам или объектам, скрывая их сложность.
* Может использоваться для управления доступом к сервисам или объектам и для создания безопасных интерфейсов.

Минусы паттерна «Фасад»:
* Может усложнить код, если используется слишком много фасадов.
* Может быть трудно понять, какие сервисы или объекты скрывает фасад, особенно если он скрывает много сервисов или объектов.
* Может стать супер классом, слишком много делать, или слишком много в себе хранить, и завязывать на себя много сервисов.
* Может затруднить тестирование системы, т.к. тестировать приходится не только отдельные компоненты, но и «Фасад».
* В некоторых случаях, напрямую работать проще без фасада.
*/

func MakeFacade() {
	cf := NewFacade()
	cf.Run()
}

type Facade struct {
	serv1 *Service1
	serv2 *Service2
}

type Service1 struct{}

type Service2 struct{}

func (s1 *Service1) DoSomething() {
	fmt.Println("Do service1...")
}

func (s2 *Service2) DoSomething() {
	fmt.Println("Do service2...")
}

func NewFacade() *Facade {
	return &Facade{serv1: &Service1{}, serv2: &Service2{}}
}

func (f *Facade) Run() {
	f.serv1.DoSomething()
	f.serv2.DoSomething()
	fmt.Println("Run all services")
}
